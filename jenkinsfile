pipeline {
    agent any
    environment {
        IMAGE_NAME = "${PARAM_IMAGE_NAME}"                   /* Ex. alpinehelloworld */
        APP_EXPOSED_PORT = "${PARAM_PORT_EXPOSED}"
        IMAGE_TAG = "${PARAM_IMAGE_TAG}"                      /* Ex. latest */
        STAGING = "${PARAM_APP_NAME}-staging"
        PRODUCTION = "${PARAM_APP_NAME}-prod"
        DOCKERHUB_ID = "${PARAM_DOCKERHUB_ID}"
        DOCKERHUB_PASSWORD = credentials('dockerhub')
        PROD_API_ENDPOINT = "${PARAM_PROD_API_ENDPOINT}"      /* Ex. IP:PORT de l'API eazylabs, 100.25.147.76:1993 */
        PROD_APP_ENDPOINT = "${PARAM_PROD_APP_ENDPOINT}"      /* Ex. IP:PORT de l'application en production */
        INTERNAL_PORT = "${PARAM_INTERNAL_PORT}"              /* Par d√©faut : 5000 */
        EXTERNAL_PORT = "${PARAM_PORT_EXPOSED}"
        CONTAINER_IMAGE = "${DOCKERHUB_ID}/${IMAGE_NAME}:${IMAGE_TAG}"
        IP = "${IP}"
    }
    stages {
        stage('Build image') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Tag image') {
            steps {
                script {
                    sh "docker image tag ${IMAGE_NAME}:${IMAGE_TAG} ${DOCKERHUB_ID}/${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Push image') {
            steps {
                script {
                    sh '''
                        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_ID --password-stdin
                        docker push ${DOCKERHUB_ID}/$IMAGE_NAME:$IMAGE_TAG
                    '''
                }
            }
        }

        stage('Run image') {
            steps {
                script {
                    sh '''
                        echo "Cleaning existing container if it exists"
                        docker ps -a | grep -i $IMAGE_NAME && docker rm -f $IMAGE_NAME || true
                        docker run --name $IMAGE_NAME -d -p $APP_EXPOSED_PORT:$INTERNAL_PORT -e PORT=$INTERNAL_PORT ${DOCKERHUB_ID}/$IMAGE_NAME:$IMAGE_TAG
                        sleep 10
                    '''
                }
            }
        }

        stage('Test image') {
            steps {
                script {
                    sh '''
                        curl -v $IP:$APP_EXPOSED_PORT | grep -q "Hello world!"
                    '''
                }
            }
        }

        stage('Clean container') {
            steps {
                script {
                    sh '''
                        docker stop $IMAGE_NAME
                        docker rm $IMAGE_NAME
                    '''
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    sh '''
                        echo "Deploying to Staging environment"
                        ssh agent-jenkins@${STAGING} "docker pull ${CONTAINER_IMAGE} && docker rm -f ${IMAGE_NAME} || true && docker run -d --name ${IMAGE_NAME} -p ${EXTERNAL_PORT}:${INTERNAL_PORT} ${CONTAINER_IMAGE}"
                    '''
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    sh '''
                        echo "Deploying to Production environment"
                        ssh agent-jenkins@${PROD_APP_ENDPOINT} "docker pull ${CONTAINER_IMAGE} && docker rm -f ${IMAGE_NAME} || true && docker run -d --name ${IMAGE_NAME} -p ${EXTERNAL_PORT}:${INTERNAL_PORT} ${CONTAINER_IMAGE}"
                    '''
                }
            }
        }
    }
}
